{
  "name": "firepad",
  "description": "Collaborative text editing powered by Firebase",
  "version": "1.0.0",
  "author": {
    "name": "Firebase",
    "email": "support@firebase.com",
    "url": "https://www.firebase.com/"
  },
  "contributors": [
    {
      "name": "Michael Lehenbauer",
      "email": "michael@firebase.com"
    }
  ],
  "homepage": "http://www.firepad.io/",
  "repository": {
    "type": "git",
    "url": "https://github.com/firebase/firepad.git"
  },
  "bugs": {
    "url": "https://github.com/firebase/firepad/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://firebase.mit-license.org/"
    }
  ],
  "keywords": [
    "text",
    "word",
    "editor",
    "firebase",
    "realtime",
    "collaborative"
  ],
  "main": "dist/firepad.min.js",
  "files": [
    "dist/**",
    "LICENSE",
    "README.md",
    "package.json"
  ],
  "dependencies": {
    "jsdom": "0.10.x",
    "firebase": "1.0.x"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-cli": "0.1.13",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-coffeelint": "0.0.7",
    "grunt-contrib-watch": "~0.6.1",
    "karma": "^0.12.16",
    "grunt-karma": "^0.8.3",
    "karma-jasmine": "~0.1.3",
    "karma-failed-reporter": "0.0.2",
    "karma-phantomjs-launcher": "~0.1.0"
  },
  "scripts": {
    "test": "grunt test",
    "travis": "grunt"
  },
  "readme": "# Firepad\n\n[![Build Status](https://travis-ci.org/firebase/firepad.svg?branch=master)](https://travis-ci.org/firebase/firepad)\n[![Version](https://badge.fury.io/gh/firebase%2Ffirepad.svg)](http://badge.fury.io/gh/firebase%2Ffirepad)\n\n[Firepad](http://www.firepad.io/) is an open-source, collaborative code and text editor. It was\ndesigned to be embedded inside larger applications. Since it uses\n[Firebase](https://www.firebase.com/?utm_source=firepad) as a backend, it requires no server-side\ncode and can be added to any web app simply by including a couple JavaScript files.\n\nVisit [firepad.io](http://www.firepad.io/) for a demo as well as instructions on how to embed it\ninto your application!\n\nJoin our [Firepad Google Group](https://groups.google.com/forum/#!forum/firepad-io) to ask\nquestions, request features, or share your Firepad apps with the community.\n\n\n## Contributing\n\nIf you'd like to contribute to Firepad, you'll need to run the following commands to get your\nenvironment set up:\n\n```bash\n$ git clone https://github.com/firebase/firepad.git\n$ cd firepad                # go to the geofire directory\n$ npm install -g grunt-cli  # globally install grunt task runner\n$ npm install -g bower      # globally install Bower package manager\n$ npm install               # install local npm build / test dependencies\n$ bower install             # install local JavaScript dependencies\n$ grunt watch               # watch for source file changes\n```\n\n`grunt watch` will watch for changes in the `/lib/` directory and lint, concatenate, and minify the\nsource files when a change occurs. The output files are written to the `/dist/` directory.\n\nYou can run the test suite by navigating to `file:///path/to/firepad/tests/index.html` or via the\ncommand line using `grunt test`.\n\n\n## Source Code Overview\n\nTo get started, here are some highlights of the directory structure and notable source files:\n\n* `dist/` - output directory for all files generated by grunt (`firepad.js`, `firepad.min.js`, `firepad.css`, `firepad.eot`).\n* `examples/` - examples of embedding Firepad.\n* `font/` - icon font used for rich text toolbar.\n* `lib/`\n    * `firepad.js` - Entry point for Firepad.\n    * `text-operation.js`, `client.js` - Heart of the Operation Transformation implementation.  Based on\n      [ot.js](https://github.com/Operational-Transformation/ot.js/) but extended to allow arbitrary\n      attributes on text (for representing rich-text).\n    * `annotation-list.js` - A data model for representing annotations on text (i.e. spans of text with a particular\n      set of attributes).\n    * `rich-text-codemirror.js` - Uses `AnnotationList` to track annotations on the text and maintain the appropriate\n      set of markers on a CodeMirror instance.\n    * `firebase-adapter.js` - Handles integration with Firebase (appending operations, triggering retries,\n      presence, etc.).\n* `test/` - Jasmine tests for Firepad (many of these were borrowed from ot.js).\n",
  "readmeFilename": "README.md",
  "_id": "firepad@1.0.0",
  "_from": "firepad@^1.0.0"
}
