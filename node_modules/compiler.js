var globals 	= require("globals");
var Firebase 	= require("firebase");
var Firepad 	= require("firepad");
var fs 			= require("fs");
var process 	= require("child_process");
var path 		= require("path");

var response = {};

var getCodeExtension = function(language) {
	switch(language) {
		case 'Java':
			return '.java';
			break;
		case 'C++':
			return '.cpp';
			break;
		default:
			return '';
			break;
	}
}

var getCompileCommand = function(params) {
	var extension = getCodeExtension(params.language);

	switch(params.language) {
		case 'Java':
			return 'javac ' +
					globals.tempFileStore +
					params.folderName +
					"/" + 
					params.fileName +
					extension;
			break;
		case 'C++':
			return 'g++ -o ' +
					globals.tempFileStore +
					params.folderName + 
					"/" +
					params.fileName +
					".o " +
					globals.tempFileStore +
					params.folderName +
					"/" + 
					params.fileName +
					extension;
			break;
		default:
			return '';
			break;
	}
};

var getExecuteCommand = function(params) {
	var classPath 		= path.join(__dirname, '..', 'temp-store', params.folderName);
	var executeCommand 	= "";

	if(params.language === "Java") {
		executeCommand 	= 	"java -cp " +
							classPath + 
							" " + 
							params.fileName;
	}
	else if(params.language === "C++") {
		executeCommand 	= 	classPath +
							"/" +
							params.fileName + ".o";
	}
	else {
		executeCommand = "";
	}

	return executeCommand;
}

var retrieveFirepadCode = function(params, callback) {
	var path = globals.firebaseRoot + params.codePath;
	var retrieveResponse;
	var headless = new Firepad.Headless(path);
	headless.getText(function(codeRetrieved) {
		retrieveResponse = {
			"folderName" 	: params.folderName,
			"fileName" 		: params.fileName,
			"fileData" 		: codeRetrieved,
			"language" 		: params.language
		};
		return callback(retrieveResponse);
	});
}

var writeCodeToFile = function(params, callback) {
	var extension 	= getCodeExtension(params.language);
	var folderPath 	= globals.tempFileStore + params.folderName;
	var filePath 	= folderPath + "/" + params.fileName + extension;
	var response 	= {};

	fs.mkdir(folderPath, function() {
		fs.writeFile(filePath , params.fileData, function (error) {
		  if (error) {
		  	response = {
		  		"writeResult" 	: "fail",
		  		"error" 		: error.toString()
		  	};
		  	return callback(response);
		  }
		  return callback(params);
		});
	});
}

var compileCode = function(params, callback) {
	var compileCommand = getCompileCommand(params);
	var response = {};

	if(compileCommand.length===0) {
		response = {
			"compileResult" : "fail",
			"error" 		: "Invalid language."
		}
		return callback(response);
	}

	var exec = process.exec(compileCommand, function(error, stdout, stderr) {
		if(error !== null) {
			response = {
				"compileResult" : "fail",
				"error" 		: error.toString()
			};
		}
		else if(stderr) {
			response = {
				"compileResult" : "fail",
				"error" 		: stderr.toString()
			};
		}
		else {
			response = {
				"compileResult" : "success",
				"params" 		: params
			};
		}
		return callback(response);
	});
}

var executeCode = function(params, callback) {
	var response 		= {};

	if(params.compileResult == "fail") {
		response = {
			"result" 	: "fail",
			"error" 	: params.error.toString()
		};
		return callback(response);
	}

	var params 			= params.params;
	var executeCommand 	= getExecuteCommand(params);
	var exec;

	exec = process.exec(executeCommand, function(error, stdout, stderr) {
		if(error !== null) {
			response = {
				"executeResult" : "fail",
				"error" 		: error.toString()
			};
		}
		else if(stderr) {
			response = {
				"executeResult" : "fail",
				"stderr" 		: stderr
			};
		}
		else {
			response = {
				"executeResult" : "success",
				"stdout" 		: stdout
			};
		}
		return callback(response);
	});
}

var compileAndExecute = function(params, callback) {
	var path 		= params.codePath;
	var language 	= params.language;
	var firebaseRef;

	if(path.length === 0) {
		response = {
			"result": "error",
			"error": "Path is empty."
		};
		return callback(response);
	}

	retrieveFirepadCode(params, function(retrieveResponse) {
		console.log("retrieveFirepadCode callback. retrieveResponse : ", retrieveResponse);
		writeCodeToFile(retrieveResponse, function(writeResponse) {
			console.log("writeCodeToFile callback. writeResponse : ", writeResponse);
			compileCode(writeResponse, function(compileResponse) {
				console.log("compileCode callback. compileResponse : ", compileResponse);
				executeCode(compileResponse, function(executeResponse) {
					console.log("executeCode callback. executeResponse : ", executeResponse);
					return callback(executeResponse);
				});
			});
		});
	});
}

module.exports = {
	compileAndExecute: compileAndExecute
}